<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>kind快速部署Kubernetes环境</title>
    <url>/2020/11/26/kind%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2Kubernetes%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="什么是kind"><a href="#什么是kind" class="headerlink" title="什么是kind"></a>什么是kind</h1><p>kind:Kubernetes In Docker，顾名思义，就是将kubernetes所需要的所有组件，全部部署在一个docker容器中，是一套开箱即用的kubernetes环境搭建方案。使用kind搭建的集群无法在生产中使用，但是如果你只是想在本地测试或者开发使用，不想占用太多的资源，那么使用kind是不错的选择。同样，kind还可以很方便的帮你本地的kubernetes源代码打成对应的镜像，方便测试。</p>
<p>GitHub: <a href="https://github.com/kubernetes-sigs/kind">https://github.com/kubernetes-sigs/kind</a></p>
<p>Documentation: <a href="https://kind.sigs.k8s.io/">https://kind.sigs.k8s.io/</a></p>
<h1 id="安装kind"><a href="#安装kind" class="headerlink" title="安装kind"></a>安装kind</h1><p>以Linux下安装为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -Lo .&#x2F;kind https:&#x2F;&#x2F;kind.sigs.k8s.io&#x2F;dl&#x2F;v0.9.0&#x2F;kind-linux-amd64</span><br><span class="line">chmod +x .&#x2F;kind</span><br><span class="line">mv .&#x2F;kind &#x2F;usr&#x2F;local&#x2F;bin&#x2F;kind</span><br></pre></td></tr></table></figure>

<h1 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind create cluster</span><br></pre></td></tr></table></figure>
<p>该命令将默认创建名为kind的集群</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind create cluster --name test</span><br></pre></td></tr></table></figure>
<p>该命令将创建名为test的集群</p>
<h1 id="查询集群"><a href="#查询集群" class="headerlink" title="查询集群"></a>查询集群</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind get clusters</span><br></pre></td></tr></table></figure>

<h1 id="删除集群"><a href="#删除集群" class="headerlink" title="删除集群"></a>删除集群</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind delete cluster --name test</span><br></pre></td></tr></table></figure>
<p>删除名为test的集群，–name未指定的话，将默认删除kind集群</p>
]]></content>
      <categories>
        <category>云原生</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu搭建Kubernetes集群</title>
    <url>/2020/11/26/kubernetes_install_on_ubuntu/</url>
    <content><![CDATA[<p>本文介绍如何在Ubuntu系统上搭建Kubernetes集群。</p>
<h1 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h1><p>1、操作系统Ubuntu 19.10</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu-001:~# uname -a</span><br><span class="line">Linux ubuntu-001 5.3.0-51-generic #44-Ubuntu SMP Wed Apr 22 21:09:44 UTC 2020 x86_64 x86_64 x86_64 GNU&#x2F;Linux</span><br><span class="line">root@ubuntu-001:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu 19.10</span><br><span class="line">Release:	19.10</span><br><span class="line">Codename:	eoan</span><br></pre></td></tr></table></figure>
<p>2、通过阿里云相关镜像源安装</p>
<p><strong>以下均为root用户下操作</strong></p>
<h1 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h1><h2 id="1、修改主机名"><a href="#1、修改主机名" class="headerlink" title="1、修改主机名"></a>1、修改主机名</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname ubuntu-001</span><br></pre></td></tr></table></figure>

<h2 id="2、关闭防火墙"><a href="#2、关闭防火墙" class="headerlink" title="2、关闭防火墙"></a>2、关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install ufw</span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure>

<h2 id="3、安装docker"><a href="#3、安装docker" class="headerlink" title="3、安装docker"></a>3、安装docker</h2><p><strong>安装必要的工具及GPG证书</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu&#x2F;gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<p><strong>配置阿里云docker源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add-apt-repository &quot;deb [arch&#x3D;amd64] https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意： 如果是arm架构系统，请对应更换， 如：add-apt-repository “deb [arch=arm64] <a href="https://mirrors.aliyun.com/docker-ce/linux/ubuntu">https://mirrors.aliyun.com/docker-ce/linux/ubuntu</a> $(lsb_release -cs) stable”</p>
<p><strong>查询docker版本（否则默认安装最新的版本）</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br><span class="line">#   docker-ce | 5:19.03.8~3-0~ubuntu-eoan | https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu eoan&#x2F;stable amd64 Packages</span><br><span class="line">#   docker-ce | 5:19.03.7~3-0~ubuntu-eoan | https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu eoan&#x2F;stable amd64 Packages</span><br><span class="line">#   docker-ce | 5:19.03.6~3-0~ubuntu-eoan | https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu eoan&#x2F;stable amd64 Packages</span><br></pre></td></tr></table></figure>

<p><strong>安装指定版本docker</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">apt-get -y install docker-ce&#x3D;5:19.03.8~3-0~ubuntu-eoan</span><br></pre></td></tr></table></figure>

<p><strong>启动docker</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable docker &amp;&amp; systemctl start docker</span><br></pre></td></tr></table></figure>

<p><strong>查询docker服务状态</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<p><strong>查看docker版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<h2 id="4、安装kubelet、kubeadm-和-kubectl"><a href="#4、安装kubelet、kubeadm-和-kubectl" class="headerlink" title="4、安装kubelet、kubeadm 和 kubectl"></a>4、安装kubelet、kubeadm 和 kubectl</h2><p><strong>配置kubernetes.repo的源，由于官方源国内无法访问，这里使用阿里云源</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F;doc&#x2F;apt-key.gpg | apt-key add - </span><br><span class="line">cat &lt;&lt;EOF &gt;&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;kubernetes.list</span><br><span class="line">deb https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;apt&#x2F; kubernetes-xenial main</span><br><span class="line">EOF  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>在所有节点上安装指定版本 kubelet、kubeadm 和 kubectl</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-cache madison kubectl</span><br><span class="line">apt-cache madison kubeadm</span><br><span class="line">apt-cache madison kubelet</span><br><span class="line">apt-get install -y kubelet&#x3D;1.18.0-00 kubeadm&#x3D;1.18.0-00 kubectl&#x3D;1.18.0-00</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>启动kubelet服务</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet </span><br></pre></td></tr></table></figure>

<h2 id="5、关闭swap分区"><a href="#5、关闭swap分区" class="headerlink" title="5、关闭swap分区"></a>5、关闭swap分区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br></pre></td></tr></table></figure>

<h2 id="6、初始化master节点"><a href="#6、初始化master节点" class="headerlink" title="6、初始化master节点"></a>6、初始化master节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubeadm init --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.18.0 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --token-ttl 0 --ignore-preflight-errors&#x3D;Swap</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu-001:~# kubeadm init --image-repository registry.aliyuncs.com&#x2F;google_containers --kubernetes-version v1.18.0 --pod-network-cidr&#x3D;10.244.0.0&#x2F;16 --token-ttl 0 --ignore-preflight-errors&#x3D;Swap</span><br><span class="line">W0507 17:11:30.761887   14961 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">[init] Using Kubernetes version: v1.18.0</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">	[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#39;kubeadm config images pull&#39;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[certs] Using certificateDir folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;pki&quot;</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [ubuntu-001 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.105.107]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;server&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;server serving cert is signed for DNS names [ubuntu-001 localhost] and IPs [10.0.105.107 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;peer&quot; certificate and key</span><br><span class="line">[certs] etcd&#x2F;peer serving cert is signed for DNS names [ubuntu-001 localhost] and IPs [10.0.105.107 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd&#x2F;healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;&#x2F;etc&#x2F;kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">W0507 17:11:34.680144   14961 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">W0507 17:11:34.682546   14961 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;&#x2F;etc&#x2F;kubernetes&#x2F;manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 20.502602 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.18&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node ubuntu-001 as control-plane by adding the label &quot;node-role.kubernetes.io&#x2F;master&#x3D;&#39;&#39;&quot;</span><br><span class="line">[mark-control-plane] Marking the node ubuntu-001 as control-plane by adding the taints [node-role.kubernetes.io&#x2F;master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: 10y2lc.v55p1f47j3lp15gg</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;&#x2F;etc&#x2F;kubernetes&#x2F;kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.0.105.107:6443 --token 10y2lc.v55p1f47j3lp15gg \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:1093b027cf31d755dcaa7109ba890962c140e2d6e9c46bf4207a0c519ce7bf36 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>按照kubeadm init成功后打印提示，继续操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br></pre></td></tr></table></figure>

<p>kubectl get nodes查询到节点处于NotReady状态，是因为网络插件还未就位，也就是这里要求运行的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br></pre></td></tr></table></figure>

<p>如果要暂时忽略让节点Ready，将如下文件的–network-plugin=cni字段去掉, (该文件是在kubeadm init或者kubeadm join过程中生成的), 修改完后重启kubelet即可(systemctl restart kubelet)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu-001:~# cat &#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env</span><br><span class="line">KUBELET_KUBEADM_ARGS&#x3D;&quot;--cgroup-driver&#x3D;cgroupfs --network-plugin&#x3D;cni --pod-infra-container-image&#x3D;registry.aliyuncs.com&#x2F;google_containers&#x2F;pause:3.2 --resolv-conf&#x3D;&#x2F;run&#x2F;systemd&#x2F;resolve&#x2F;resolv.conf&quot;</span><br></pre></td></tr></table></figure>
<p>安装flannel，kubectl apply -f kube-flannel.yaml</p>
<h2 id="7、join-node节点"><a href="#7、join-node节点" class="headerlink" title="7、join node节点"></a>7、join node节点</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu-002:~# kubeadm join 10.0.105.107:6443 --token 10y2lc.v55p1f47j3lp15gg --discovery-token-ca-cert-hash sha256:1093b027cf31d755dcaa7109ba890962c140e2d6e9c46bf4207a0c519ce7bf36</span><br><span class="line">W0507 17:16:18.524687   26000 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">	[WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;setup&#x2F;cri&#x2F;</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with &#39;kubectl -n kube-system get cm kubeadm-config -oyaml&#39;</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the &quot;kubelet-config-1.18&quot; ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;config.yaml&quot;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;&#x2F;var&#x2F;lib&#x2F;kubelet&#x2F;kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run &#39;kubectl get nodes&#39; on the control-plane to see this node join the cluster.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="查询所有node及pod状态"><a href="#查询所有node及pod状态" class="headerlink" title="查询所有node及pod状态"></a>查询所有node及pod状态</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl get node -o wide</span><br><span class="line">kubectl get pod --all-namespaces -o wide</span><br></pre></td></tr></table></figure>

<h2 id="增加kubectl命令自动补全功能"><a href="#增加kubectl命令自动补全功能" class="headerlink" title="增加kubectl命令自动补全功能"></a>增加kubectl命令自动补全功能</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure>

<h2 id="默认master节点不会调度pod，去掉此限制-可选做"><a href="#默认master节点不会调度pod，去掉此限制-可选做" class="headerlink" title="默认master节点不会调度pod，去掉此限制(可选做)"></a>默认master节点不会调度pod，去掉此限制(可选做)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl taint node ubuntu-001 node-role.kubernetes.io&#x2F;master:NoSchedule-</span><br></pre></td></tr></table></figure>
<p>ubuntu-001为主机名</p>
<h2 id="node节点ROLES默认显示none，将其修改为显示worker-可选做"><a href="#node节点ROLES默认显示none，将其修改为显示worker-可选做" class="headerlink" title="node节点ROLES默认显示none，将其修改为显示worker(可选做)"></a>node节点ROLES默认显示none，将其修改为显示worker(可选做)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl label node ubuntu-002 node-role.kubernetes.io&#x2F;worker&#x3D; --overwrite</span><br><span class="line">kubectl label node ubuntu-003 node-role.kubernetes.io&#x2F;worker&#x3D; --overwrite</span><br><span class="line">root@ubuntu-001:~# kubectl get node -o wide</span><br><span class="line">NAME         STATUS   ROLES    AGE   VERSION   INTERNAL-IP    EXTERNAL-IP   OS-IMAGE       KERNEL-VERSION     CONTAINER-RUNTIME</span><br><span class="line">ubuntu-001   Ready    master   16h   v1.18.0   10.0.105.107   &lt;none&gt;        Ubuntu 19.10   5.3.0-51-generic   docker:&#x2F;&#x2F;19.3.8</span><br><span class="line">ubuntu-002   Ready    worker   16h   v1.18.0   10.0.105.21    &lt;none&gt;        Ubuntu 19.10   5.3.0-46-generic   docker:&#x2F;&#x2F;19.3.8</span><br><span class="line">ubuntu-003   Ready    worker   61m   v1.18.0   10.0.105.62    &lt;none&gt;        Ubuntu 19.10   5.3.0-46-generic   docker:&#x2F;&#x2F;19.3.8</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>kubernetes</category>
      </categories>
      <tags>
        <tag>kubernetes</tag>
        <tag>云计算</tag>
        <tag>边缘计算</tag>
      </tags>
  </entry>
</search>
